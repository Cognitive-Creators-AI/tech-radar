version: '3'

vars:
  AWS_REGION: ap-southeast-2
  S3_BUCKET: radar.sandbox.aetheron.com
  CLOUDFRONT_DISTRIBUTION_ID: E3C42WRA8M2TYU
  DEFAULT_PORT: 8000

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  serve:
    desc: Run local development server
    vars:
      PORT: '{{.PORT | default .DEFAULT_PORT}}'
      HOST: '{{.HOST | default "127.0.0.1"}}'
    cmds:
      - |
        if command -v python3 >/dev/null 2>&1; then
          echo "Serving public/ at http://{{.HOST}}:{{.PORT}}"
          cd public && python3 -m http.server {{.PORT}} --bind {{.HOST}}
        else
          echo "python3 not found. Please install Python 3 or run: npx serve public" >&2
          exit 1
        fi

  deploy:
    desc: Deploy tech radar to S3 and invalidate CloudFront
    env:
      AWS_DEFAULT_REGION: '{{.AWS_REGION}}'
    cmds:
      - echo "🚀 Deploying Tech Radar to S3..."
      - task: copy-cursor-rules
      - task: sync-s3
      - task: cleanup-temp-files
      - task: invalidate-cloudfront
      - |
        echo "✅ Deployment complete!"
        echo "🌐 Site will be updated at: https://{{.S3_BUCKET}}"
        echo ""
        echo "⚠️  WARNING: This is using the OLD AWS account credentials"
        echo "⚠️  These should be migrated to the new account and use AWS SSO"

  copy-cursor-rules:
    desc: Copy Cursor rules to public directory
    internal: true
    cmds:
      - |
        if [ -d ".cursor/rules/radar" ]; then
          echo "📋 Copying Cursor rules to public directory..."
          mkdir -p public/.cursor/rules/radar
          cp -r .cursor/rules/radar/* public/.cursor/rules/radar/
        fi
    silent: true

  sync-s3:
    desc: Sync public directory to S3
    internal: true
    cmds:
      - echo "📦 Syncing public directory to S3..."
      - |
        aws s3 sync public/ s3://{{.S3_BUCKET}}/ \
          --delete \
          --cache-control "no-cache" \
          --exclude ".DS_Store" \
          --exclude "*.swp"

  cleanup-temp-files:
    desc: Clean up temporary .cursor files from public
    internal: true
    cmds:
      - |
        if [ -d "public/.cursor" ]; then
          echo "🧹 Cleaning up temporary files..."
          rm -rf public/.cursor
        fi
    silent: true

  invalidate-cloudfront:
    desc: Invalidate CloudFront cache
    internal: true
    cmds:
      - echo "🔄 Invalidating CloudFront cache..."
      - |
        INVALIDATION_ID=$(aws cloudfront create-invalidation \
          --distribution-id {{.CLOUDFRONT_DISTRIBUTION_ID}} \
          --paths "/*" "/.cursor/*" \
          --query 'Invalidation.Id' \
          --output text)
        echo "📍 CloudFront invalidation ID: $INVALIDATION_ID"

  install:
    desc: Install Task (taskfile) on macOS/Linux
    cmds:
      - |
        if command -v task >/dev/null 2>&1; then
          echo "✅ Task is already installed"
          task --version
        else
          echo "📦 Installing Task..."
          if [[ "$OSTYPE" == "darwin"* ]]; then
            brew install go-task/tap/go-task
          else
            sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
          fi
        fi
